{"version":3,"sources":["Components/Context/index.js","Components/Header.js","Components/DataTag.js","Components/PickupInfo.js","Components/DeliveryInfo.js","Components/TransportationInfo.js","Components/LoadCard.js","Components/NoCardData.js","Components/LoadList.js","Components/SortTools.js","Components/FilterTools.js","Components/ToolBar.js","Components/AdditionalInfo.js","Components/ContactInfo.js","Components/CommentInfo.js","Components/ModalLoadCard.js","App.js","reportWebVitals.js","index.js"],"names":["TruckerToolsContext","React","createContext","Provider","props","useState","originalLoadListData","setOriginalLoadListData","currentLoadListData","setCurrentLoadListData","modalCardData","setModalCardData","isModalLoadCardActive","setIsModalLoadCardActive","isDateSortActive","setIsDateSortActive","isWeightSortActive","setIsWeightSortActive","filterTruckOption","setFilterTruckOption","useEffect","jsonData","loadList","dateSortFunction","dataArray","sort","a","b","Date","pickup","dateTime","weightSortFunction","weight","value","functions","closeModalLoadCard","showModalLoadCard","id","find","loadCard","dateSort","dataCopy","newData","weightSort","updateFilterTruckOption","filterSubmit","filter","truckTypes","includes","children","Header","className","href","target","size","DataTag","dataEntry","PickupInfo","originCity","originState","pickupDate","pickupTime","DeliveryInfo","destinationCity","destinationState","deliveryDate","deliveryTime","TransportationInfo","stops","LoadCard","index","loadInfo","context","useContext","onClick","origin","city","state","date","time","destination","delivery","numberOfStops","NoCardData","LoadList","loadListCards","length","map","loadCardData","SortTools","type","name","autoComplete","htmlFor","FilterTools","onSubmit","event","preventDefault","handleSubmit","onChange","ToolBar","AdditionalInfo","deadHead","reloads","quantity","temp_min","temp_max","targetPay","ContactInfo","companyName","email","phone","slice","CommentInfo","commentTag","comment","ModalLoadCard","Modal","show","onHide","centered","loadId","contact","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.33e155fa.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport jsonData from '../Data/tt_coding_challenge_data.json';\r\nexport const TruckerToolsContext = React.createContext();\r\n\r\n/**\r\n *  Globalized functions and state variables that hosts the logic for the application. \r\n */\r\n\r\nexport const Provider = (props) => {\r\n\r\n    /* Card Data Format - Template for modal card*/\r\n    let cardDataTemplate = \r\n    {\r\n        \"id\": 12533798,\r\n        \"loadId\": 12533798,\r\n        \"origin\": {\r\n            \"city\": \"FREEDOM\",\r\n            \"state\": \"OK\"\r\n        },\r\n        \"pickup\": {\r\n            \"date\": \"05/24/2021\",\r\n            \"time\": \"11:00 AM\",\r\n            \"dateTime\": \"05/24/2021 11:00 AM\"\r\n        },\r\n        \"delivery\": {\r\n            \"date\": \"05/25/2021\",\r\n            \"time\": \"10:00 AM\",\r\n            \"dateTime\": \"05/25/2021 10:00 AM\"\r\n        },\r\n        \"numberOfStops\": 2,\r\n        \"destination\": {\r\n            \"city\": \"WILMER\",\r\n            \"state\": \"TX\"\r\n        },\r\n        \"length\": \"60\",\r\n        \"quantity\": \"\",\r\n        \"weight\": \"44500\",\r\n        \"truckTypes\": \"Van or Flatbed\",\r\n        \"contact\": {\r\n            \"name\": null,\r\n            \"phone\": \"8667717013\",\r\n            \"email\": \"jpollak@englandlogistics.com\"\r\n        },\r\n        \"companyName\": \"England Logistics, Inc.\",\r\n        \"deadHead\": 189,\r\n        \"targetPay\": \"900\",\r\n        \"reloads\": 4,\r\n        \"comment\": \"\",\r\n        \"temp_min\": \"\",\r\n        \"temp_max\": \"\"\r\n    }\r\n    /* React Application State Data*/\r\n    const [originalLoadListData, setOriginalLoadListData] = useState([]);\r\n    const [currentLoadListData, setCurrentLoadListData] = useState([]);\r\n\r\n    const [modalCardData, setModalCardData] = useState(cardDataTemplate);\r\n    const [isModalLoadCardActive, setIsModalLoadCardActive] = useState(false);\r\n\r\n    const [isDateSortActive, setIsDateSortActive] = useState(false);\r\n    const [isWeightSortActive, setIsWeightSortActive] = useState(false);\r\n    const [filterTruckOption, setFilterTruckOption] = useState(\"Unfiltered\");\r\n\r\n    /* React Life Cycle Use Effects - On load we set the state data */\r\n    // CurrentLoadListData is what gets displayed. OriginalLoadListData is saved off for filter options to avoid over-writing data.\r\n    useEffect( () => {\r\n        setOriginalLoadListData(jsonData.loadList);\r\n        setCurrentLoadListData(jsonData.loadList); \r\n    }, []);\r\n\r\n    /* React Application Functions */\r\n    const handleCloseModalLoadCard = () => setIsModalLoadCardActive(false);\r\n\r\n    const handleShowModalLoadCard = (id) => {\r\n        setModalCardData(currentLoadListData.find( loadCard => loadCard.id === id ));\r\n        setIsModalLoadCardActive(true);\r\n    }\r\n\r\n    const dateSortFunction = (dataArray) => {\r\n        return dataArray.sort( (a,b) => {\r\n            return new Date(a.pickup.dateTime) - new Date(b.pickup.dateTime);\r\n        })\r\n    }\r\n\r\n    const weightSortFunction = (dataArray) => {\r\n        return dataArray.sort( (a,b) => {\r\n            return (a.weight) - (b.weight);\r\n        })\r\n    }\r\n\r\n    const handleUpdateFilterTruckOption = (value) =>{  \r\n        setFilterTruckOption(value);  \r\n    }    \r\n\r\n    const truckFilterFunction = (dataArray) => {\r\n        return dataArray.filter( (a) => {\r\n            if(a.truckTypes.includes(filterTruckOption)){\r\n                return a;\r\n            }\r\n        })\r\n    }\r\n\r\n    const handleDateSort = () => {\r\n        const dataCopy = [...currentLoadListData];\r\n        let newData = dateSortFunction(dataCopy);\r\n        setCurrentLoadListData( newData );\r\n        setIsDateSortActive(true);\r\n        setIsWeightSortActive(false);     \r\n    }\r\n\r\n    const handleWeightSort = () => {\r\n        const dataCopy = [...currentLoadListData];\r\n        let newData = weightSortFunction(dataCopy);\r\n        setCurrentLoadListData( newData );\r\n        setIsWeightSortActive(true);\r\n        setIsDateSortActive(false);\r\n    }\r\n\r\n    const handleFilterSubmit = () => {\r\n        const dataCopy = [...originalLoadListData];\r\n        let newData = dataCopy;\r\n        if(filterTruckOption !== 'Unfiltered'){\r\n            newData = truckFilterFunction(dataCopy);\r\n        }\r\n        if(isDateSortActive === true){\r\n            newData = dateSortFunction(newData);\r\n        }else if(isWeightSortActive === true){\r\n            newData = weightSortFunction(newData);\r\n        }\r\n        setCurrentLoadListData( newData );\r\n    }\r\n\r\n    /* --------------------------------------------------*/\r\n    return (\r\n        <TruckerToolsContext.Provider value={{\r\n            currentLoadListData,\r\n            isModalLoadCardActive,\r\n            modalCardData,\r\n            functions: {\r\n                closeModalLoadCard: handleCloseModalLoadCard,\r\n                showModalLoadCard: handleShowModalLoadCard,\r\n                dateSort: handleDateSort,\r\n                weightSort: handleWeightSort,\r\n                updateFilterTruckOption: handleUpdateFilterTruckOption,\r\n                filterSubmit: handleFilterSubmit\r\n            }\r\n        }}>\r\n            {props.children}\r\n        </TruckerToolsContext.Provider>\r\n    );\r\n}","import React from 'react';\r\nimport { SiGithub } from \"react-icons/si\";\r\n\r\n/**\r\n * \r\n * @returns Simple header tag for title and github link to the project\r\n */\r\n\r\nconst Header = () => {\r\n\r\n    return(\r\n        <div className=\"container bg-light\">\r\n            <header className=\"d-flex flex-wrap justify-content-center py-3 mb-4\">\r\n                <div className=\"d-flex  mb-3 mb-md-0 me-md-auto text-dark\">\r\n                    <span className=\"display-6\">Trucker Tools Coding Challenge</span>\r\n                </div>\r\n                <ul className=\"nav\">\r\n                    <li className=\"nav-item\"><a href=\"https://github.com/DevBGarcia\" target=\"_none\" className=\"nav-link\"><SiGithub size={30}/></a></li>\r\n                </ul>\r\n            </header>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\n/**\r\n * \r\n * @param { children } param0 \r\n * @returns Wrapper component for every json data entry to add logic if the data is empty. \r\n *          Displays 'Undefined' to the user if the data is invalid.\r\n */\r\n\r\nconst DataTag = ({children}) => {\r\n\r\n    let dataEntry = children\r\n    if(children === \"\" || children === null){\r\n        dataEntry = <span className=\"text-muted\">Undefined</span>\r\n    }\r\n\r\n    return(dataEntry);\r\n\r\n}\r\n\r\nexport default DataTag;","import React from 'react';\r\nimport DataTag from './DataTag';\r\n\r\n/**\r\n * \r\n * @param {originCity, originState, pickupDate, pickupTime} props \r\n * @returns Description list tag for the following props values onto the LoadCard & ModalLoadCard.\r\n */\r\n\r\nconst PickupInfo = (props) => {\r\n\r\n    return(\r\n        <dl className=\"row mt-1 border-bottom\">\r\n            <dt className=\"col-sm-4 text-md-end align-self-center pb-3 section-label\">Pickup</dt>\r\n            <dd className=\"col-sm-8 text-md-center\">\r\n                <span className=\"data-label\">Origin:</span> <DataTag>{props.originCity}</DataTag>, <DataTag>{props.originState}</DataTag>\r\n                <br/> \r\n                <span className=\"data-label\">Date:</span> <DataTag>{props.pickupDate}</DataTag>, <DataTag>{props.pickupTime}</DataTag>\r\n            </dd>\r\n        </dl>\r\n    )\r\n};\r\n\r\nexport default PickupInfo;","import React from 'react';\r\nimport DataTag from './DataTag';\r\n\r\n/**\r\n * \r\n * @param { destinationCity, destinationState, deliveryDate, deliveryTime } props \r\n * @returns Description list tag for the following props values onto the LoadCard & ModalLoadCard.\r\n */\r\n\r\nconst DeliveryInfo = (props) => {\r\n\r\n    return(\r\n        <dl className=\"row border-bottom\">\r\n            <dt className=\"col-sm-4 text-md-end align-self-center pb-3 section-label\">Delivery</dt>\r\n            <dd className=\"col-sm-8 text-md-center\">\r\n                <span className=\"data-label\">Destination</span>: <DataTag>{props.destinationCity}</DataTag>, <DataTag>{props.destinationState}</DataTag>\r\n                <br/> \r\n                <span className=\"data-label\">Date:</span> <DataTag>{props.deliveryDate}</DataTag>, <DataTag>{props.deliveryTime}</DataTag>\r\n            </dd>\r\n        </dl>\r\n    )\r\n};\r\n\r\nexport default DeliveryInfo;","import React from 'react';\r\nimport DataTag from './DataTag';\r\n\r\n/**\r\n * \r\n * @param {truckTypes, weight, stops} props \r\n * @returns Description list tag for the following props values onto the LoadCard & ModalLoadCard.\r\n */\r\n\r\nconst TransportationInfo = (props) => {\r\n\r\n    return(\r\n        <dl className=\"row border-bottom\">\r\n            <dt className=\"col-sm-4 text-md-end align-self-center pb-3 section-label\">Transportation</dt>\r\n            <dd className=\"col-sm-8 text-md-center\">\r\n                <span className=\"data-label\">Truck Type(s):</span> <DataTag>{props.truckTypes}</DataTag> \r\n                <br/>\r\n                <span className=\"data-label\">Weight(lbs):</span> <DataTag>{props.weight}</DataTag> \r\n                <br/> \r\n                <span className=\"data-label\">Interim Stops:</span> <DataTag>{props.stops - 2}</DataTag>\r\n            </dd>\r\n        </dl>\r\n    )\r\n};\r\n\r\nexport default TransportationInfo;","import React,{useContext} from 'react';\r\nimport PickupInfo from './PickupInfo';\r\nimport DeliveryInfo from './DeliveryInfo';\r\nimport TransportationInfo from './TransportationInfo';\r\nimport { TruckerToolsContext } from './Context';\r\n\r\n/**\r\n * \r\n * @param {showModalLoadCard()} context\r\n * @param {index, loadInfo} param0 = props extracted\r\n * @returns Visual container components to capture important load information to main page. Load Card data fanned out to nested components for display\r\n */\r\n\r\nconst LoadCard = ({index, loadInfo}) => {\r\n\r\n    const context = useContext(TruckerToolsContext);\r\n\r\n    return(\r\n        <div className=\"col-lg-6\">\r\n            <div className=\"container border border-4 m-1 card-shadow-hover load-card\" onClick={()=>context.functions.showModalLoadCard(loadInfo.id)} >\r\n                <span className=\"badge bg-primary\">{index}</span>\r\n                <PickupInfo \r\n                    originCity = {loadInfo.origin.city}\r\n                    originState = {loadInfo.origin.state}\r\n                    pickupDate = {loadInfo.pickup.date}\r\n                    pickupTime = {loadInfo.pickup.time}\r\n                />\r\n                <DeliveryInfo\r\n                    destinationCity = {loadInfo.destination.city}\r\n                    destinationState = {loadInfo.destination.state}\r\n                    deliveryDate = {loadInfo.delivery.date}\r\n                    deliveryTime = {loadInfo.delivery.time}\r\n                />\r\n                <TransportationInfo\r\n                    truckTypes = {loadInfo.truckTypes}\r\n                    weight = {loadInfo.weight}\r\n                    stops = {loadInfo.numberOfStops}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LoadCard;","import React from 'react';\r\nimport { IoIosCloseCircle } from \"react-icons/io\";\r\n\r\n/**\r\n * \r\n * @returns A simple react ICON and display text when the LoadList component is provided NO data to display.\r\n */\r\n\r\nconst NoCardData = () => {\r\n    return(\r\n        <div className=\"col-lg-12 text-center p-5\">\r\n            <IoIosCloseCircle size={70}/>\r\n            <h1 className=\"display-4\">Sorry, no load data match the filter.</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NoCardData;","import React, {useContext} from 'react';\r\nimport {TruckerToolsContext} from './Context';\r\nimport LoadCard from './LoadCard';\r\nimport NoCardData from './NoCardData';\r\n\r\n/**\r\n * @param { currentLoadListData } context\r\n * @returns A list of LoadCard Components to display, OR the NoCardData component when there is no load data to display\r\n */\r\n\r\nconst LoadList = () => {\r\n    \r\n    const context = useContext(TruckerToolsContext);\r\n    \r\n    let loadListCards;\r\n    if(context.currentLoadListData.length !== 0){\r\n        loadListCards = context.currentLoadListData.map( (loadCardData, index) => \r\n            <LoadCard \r\n                index={index + 1} \r\n                key={loadCardData.id} \r\n                loadInfo={loadCardData}\r\n            />);\r\n    } else {\r\n        loadListCards = <NoCardData/>\r\n    }\r\n    \r\n\r\n    return(\r\n        \r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                {loadListCards}\r\n            </div>\r\n        </div>\r\n        \r\n        );\r\n}\r\n\r\nexport default LoadList;","import React,{useContext} from 'react';\r\nimport {TruckerToolsContext} from './Context';\r\n\r\n/**\r\n * \r\n * @param { functions.dateSort(value), functions.weightSort() } context\r\n * @returns Tool bar component to handle filters via dropdown sleect menue\r\n */\r\n\r\nconst SortTools = () => {\r\n\r\n    const context = useContext(TruckerToolsContext);\r\n\r\n    return(\r\n        <div className=\"col-lg-6\">\r\n            <label><h6>Sorting Options</h6></label><br/>\r\n            <div className=\"btn-group ms-1\">\r\n                <input type=\"radio\" className=\"btn-check\" name=\"btnradio\" id=\"btnradio1\" autoComplete=\"off\"/>\r\n                <label className=\"btn btn-outline-primary \" htmlFor=\"btnradio1\" onClick={()=>context.functions.dateSort()}>Pickup Date (Chronological)</label>\r\n                <input type=\"radio\" className=\"btn-check\" name=\"btnradio\" id=\"btnradio2\" autoComplete=\"off\"/>\r\n                <label className=\"btn btn-outline-primary\" htmlFor=\"btnradio2\" onClick={()=>context.functions.weightSort()}>Load Weight (Low-to-High)</label>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default SortTools;","import React,{useContext} from 'react';\r\nimport {TruckerToolsContext} from './Context';\r\n\r\n/**\r\n * \r\n * @param { functions.updateFilterTruckOption(value), functions.filterSubmit() } context\r\n * @returns Tool bar component to handle filters via dropdown sleect menue\r\n */\r\n\r\nconst FilterTools = () => {\r\n\r\n    const context = useContext(TruckerToolsContext);\r\n\r\n    const onChange = (value) => {\r\n        context.functions.updateFilterTruckOption(value);\r\n    }\r\n\r\n    const handleSubmit = (event) =>{\r\n        event.preventDefault();\r\n        context.functions.filterSubmit();\r\n    } \r\n\r\n    return(\r\n        <div className=\"col-lg-6 \">\r\n            <form onSubmit={ (event) => handleSubmit(event) }>\r\n                <label><h6>Truck Filter Options</h6></label>\r\n                <div className=\"input-group ms-1\">\r\n                    <select className=\"form-select\" id=\"truckfilterOptions\" onChange={event=>onChange(event.target.value)}>\r\n                        <option value=\"Unfiltered\">No Filters</option>\r\n                        <option value=\"Van\">Van</option>\r\n                        <option value=\"Flatbed\">Flatbed</option>\r\n                        <option value=\"Flats w/Tarps\">Flats w/Tarps</option>\r\n                        <option value=\"Flatbed w/Tarps\">Flatbed w/Tarps</option>\r\n                        <option value=\"Step Deck\">Step Deck</option>\r\n                        <option value=\"Reefer\">Reefer</option>\r\n                        <option value=\"Undefined\">Undefined</option>\r\n                    </select>\r\n                    <button type=\"submit\" className=\"btn btn-primary px-5\">Submit</button>\r\n                </div>\r\n            </form>                  \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default FilterTools;","import React from 'react';\r\nimport SortTools from './SortTools';\r\nimport FilterTools from './FilterTools';\r\n\r\n/**\r\n * \r\n * @returns The toolbar above the LoadList that contains the SortTool and FilterTools buttons. \r\n */\r\n\r\nconst ToolBar = () => {\r\n\r\n    return(\r\n        <div className=\"container mb-1\">\r\n            <div className=\"row\">\r\n                <SortTools/>\r\n                <FilterTools/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToolBar;","import React from 'react';\r\nimport DataTag from './DataTag';\r\n\r\n/**\r\n * \r\n * @param {deadHead, length, reloads, quantity, temp_min, temp_max, targetPay} props \r\n * @returns Description list tag for the following props values onto the ModalLoadCard.\r\n */\r\n\r\nconst AdditionalInfo = (props) => {\r\n\r\n    return(\r\n        <dl className=\"row border-bottom\">\r\n            <dt className=\"col-sm-4 text-md-end align-self-center pb-3 section-label\">Additional Info</dt>\r\n            <dd className=\"col-sm-8 text-md-center\">\r\n                <span className=\"data-label\">Dead Head(mi):</span> <DataTag>{props.deadHead}</DataTag>\r\n                <br/> \r\n                <span className=\"data-label\">Length(mi):</span> <DataTag>{props.length}</DataTag>\r\n                <br/> \r\n                <span className=\"data-label\">Reloads:</span> <DataTag>{props.reloads}</DataTag>\r\n                <br/> \r\n                <span className=\"data-label\">Quantity:</span> <DataTag>{props.quantity}</DataTag>\r\n                <br/> \r\n                <span className=\"data-label\">Min Temp(F):</span> <DataTag>{props.temp_min}</DataTag>\r\n                <br/> \r\n                <span className=\"data-label\">Max Temp(F):</span> <DataTag>{props.temp_max}</DataTag>\r\n                <br/> \r\n                <span className=\"data-label\">Target Pay(USD):</span> <DataTag>{props.targetPay}</DataTag>\r\n            </dd>\r\n        </dl>\r\n    )\r\n};\r\n\r\nexport default AdditionalInfo;","import React from 'react';\r\nimport DataTag from './DataTag';\r\n\r\n/**\r\n * \r\n * @param { companyName, email, phone, name } props \r\n * @returns Description list tag for the following props values onto the ModalLoadCard.\r\n */\r\n\r\nconst ContactInfo = (props) => {\r\n\r\n    const formatPhoneNumber = (value) => {\r\n        if (!value) return value;\r\n        return `(${value.slice(0, 3)}) ${value.slice(3,6)}-${value.slice(6, 10)}`;\r\n      }\r\n\r\n    return(\r\n        <dl className=\"row border-bottom\">\r\n            <dt className=\"col-sm-4 text-md-end align-self-center pb-3 section-label\">Contact</dt>\r\n            <dd className=\"col-sm-8 text-md-center\">\r\n                <span className=\"data-label\">Company Name:</span> <DataTag>{props.companyName}</DataTag>\r\n                <br/> \r\n                <span className=\"data-label\">Email:</span> <DataTag>{props.email}</DataTag>\r\n                <br/> \r\n                <span className=\"data-label\">Phone:</span> <DataTag>{formatPhoneNumber(props.phone)}</DataTag>\r\n                <br/> \r\n                <span className=\"data-label\">Name:</span> <DataTag>{props.name}</DataTag>\r\n            </dd>\r\n        </dl>\r\n    )    \r\n}\r\n\r\nexport default ContactInfo;","import React from 'react';\r\n\r\n/**\r\n *   \r\n * @param { comment } props \r\n * @returns Logic to detect comments from the data entry, displays alternate text ModalLoadCard if empty. \r\n */\r\n\r\nconst CommentInfo = (props) => {\r\n\r\n    let commentTag = props.comment;\r\n    if(props.comment===\"\"){\r\n        commentTag = <span className=\"text-muted\">No additional comments have been provided.</span>;\r\n    }\r\n\r\n    return(\r\n        <div>\r\n        <label><h6>Comment Section:</h6></label>\r\n            <div className=\"shadow-none p-3 mb-3 bg-light rounded\">{commentTag}</div>\r\n        </div>\r\n    )    \r\n}\r\n\r\nexport default CommentInfo;","import React, {useContext} from 'react';\r\nimport { Modal } from 'react-bootstrap';\r\nimport {TruckerToolsContext} from './Context';\r\nimport PickupInfo from './PickupInfo';\r\nimport DeliveryInfo from './DeliveryInfo';\r\nimport TransportationInfo from './TransportationInfo';\r\nimport AdditionalInfo from './AdditionalInfo';\r\nimport ContactInfo from './ContactInfo';\r\nimport CommentInfo from './CommentInfo';\r\n\r\n/**\r\n * @param {modalCardData, isModalLoadCardActive, functions.closeModalLoadCard()} context\r\n * @returns The popup, Modal Load Card when a LoadCard component onClick event is activated\r\n *          The modalCardData contains everything of the json load entry \r\n *          based off of a given load Key ID which is passed to the context \r\n *          via onClick event. \r\n */\r\n\r\nconst ModalLoadCard = () => {\r\n\r\n    const context = useContext(TruckerToolsContext);\r\n\r\n    return(\r\n        <Modal show={context.isModalLoadCardActive} onHide={context.functions.closeModalLoadCard} size=\"lg\" centered>\r\n            <div className=\"container border-2\">\r\n                <button type=\"button\" className=\"btn btn-primary btn-lg mt-2 px-5\" onClick={context.functions.closeModalLoadCard}>Return</button>\r\n                <h3 className=\"text-center mt-1 pb-2\">Load ID: {context.modalCardData.loadId}</h3>\r\n                <PickupInfo \r\n                    originCity = {context.modalCardData.origin.city}\r\n                    originState = {context.modalCardData.origin.state}\r\n                    pickupDate = {context.modalCardData.pickup.date}\r\n                    pickupTime = {context.modalCardData.pickup.time}\r\n                />\r\n                <DeliveryInfo\r\n                    destinationCity = {context.modalCardData.destination.city}\r\n                    destinationState = {context.modalCardData.destination.state}\r\n                    deliveryDate = {context.modalCardData.delivery.date}\r\n                    deliveryTime = {context.modalCardData.delivery.time}\r\n                />\r\n                <TransportationInfo\r\n                    truckTypes = {context.modalCardData.truckTypes}\r\n                    weight = {context.modalCardData.weight}\r\n                    stops = {context.modalCardData.numberOfStops}\r\n                />\r\n                <AdditionalInfo\r\n                    deadHead = {context.modalCardData.deadHead}\r\n                    length = {context.modalCardData.length}\r\n                    reloads = {context.modalCardData.reloads}\r\n                    quantity = {context.modalCardData.quantity}\r\n                    temp_min = {context.modalCardData.temp_min}\r\n                    temp_max = {context.modalCardData.temp_max}\r\n                    targetPay = {context.modalCardData.targetPay}\r\n                />\r\n                <ContactInfo\r\n                    companyName = {context.modalCardData.companyName}\r\n                    email = {context.modalCardData.contact.email}\r\n                    phone = {context.modalCardData.contact.phone}\r\n                    name = {context.modalCardData.contact.name}\r\n                />\r\n                <CommentInfo\r\n                    comment = {context.modalCardData.comment}\r\n                />\r\n                <div className=\"d-grid gap-2 col-6 mx-auto\">\r\n                    <button className=\"btn btn-primary btn-lg mb-2 px-5\" type=\"button\">Book Now</button>\r\n                </div>\r\n            </div>\r\n        </Modal>\r\n    );   \r\n}\r\n\r\nexport default ModalLoadCard;","import React from 'react';\nimport Header from './Components/Header';\nimport LoadList from './Components/LoadList';\nimport ToolBar from './Components/ToolBar';\nimport ModalLoadCard from './Components/ModalLoadCard';\n\nfunction App() {\n  return (\n      <div className = \"app\">\n      \n        <Header/>\n        <ToolBar/>\n        <LoadList/>\n        <ModalLoadCard/>\n\n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {Provider} from './Components/Context';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\n\nReactDOM.render(\n  <Provider>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}